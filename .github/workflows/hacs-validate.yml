name: HACS Validation

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: "0 0 * * *"

jobs:
  hacs:
    name: HACS Validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

  hassfest:
    name: Hassfest Validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Hassfest validation
        uses: home-assistant/actions/hassfest@master

  validate-links:
    name: Validate Documentation Links
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Check README links
        run: markdown-link-check README.md --config .github/markdown-link-check-config.json
        continue-on-error: true

      - name: Check info.md links
        run: markdown-link-check info.md --config .github/markdown-link-check-config.json
        continue-on-error: true

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Home Assistant
        run: |
          python -m pip install --upgrade pip
          pip install homeassistant

      - name: Validate integration structure
        run: |
          python -c "
          import os
          import json
          
          # Check required files exist
          required_files = [
              'custom_components/whorang/__init__.py',
              'custom_components/whorang/manifest.json',
              'custom_components/whorang/config_flow.py',
              'hacs.json',
              'info.md',
              'README.md'
          ]
          
          for file in required_files:
              if not os.path.exists(file):
                  print(f'‚ùå Missing required file: {file}')
                  exit(1)
              else:
                  print(f'‚úÖ Found: {file}')
          
          # Validate manifest.json
          with open('custom_components/whorang/manifest.json', 'r') as f:
              manifest = json.load(f)
              
          required_manifest_keys = ['domain', 'name', 'documentation', 'issue_tracker', 'codeowners', 'version']
          for key in required_manifest_keys:
              if key not in manifest:
                  print(f'‚ùå Missing manifest key: {key}')
                  exit(1)
              else:
                  print(f'‚úÖ Manifest has: {key}')
          
          # Validate hacs.json
          with open('hacs.json', 'r') as f:
              hacs_config = json.load(f)
              
          required_hacs_keys = ['name', 'domains', 'documentation', 'issue_tracker', 'codeowners']
          for key in required_hacs_keys:
              if key not in hacs_config:
                  print(f'‚ùå Missing HACS key: {key}')
                  exit(1)
              else:
                  print(f'‚úÖ HACS config has: {key}')
          
          print('üéâ All validation checks passed!')
          "

  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Check code formatting with Black
        run: black --check custom_components/
        continue-on-error: true

      - name: Check import sorting with isort
        run: isort --check-only custom_components/
        continue-on-error: true

      - name: Lint with flake8
        run: flake8 custom_components/ --max-line-length=88 --extend-ignore=E203,W503
        continue-on-error: true

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [hacs, hassfest, validate-links, integration-test, quality-check]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "üîç HACS Validation Results:"
          echo "HACS: ${{ needs.hacs.result }}"
          echo "Hassfest: ${{ needs.hassfest.result }}"
          echo "Links: ${{ needs.validate-links.result }}"
          echo "Integration: ${{ needs.integration-test.result }}"
          echo "Quality: ${{ needs.quality-check.result }}"
          
          if [[ "${{ needs.hacs.result }}" == "success" && "${{ needs.hassfest.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "‚úÖ Core validation passed - Ready for HACS submission!"
          else
            echo "‚ùå Some core validations failed - Review before HACS submission"
          fi
